#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

PLUGIN_BASE_PATH="$PLUGIN_PATH"
if [[ -n $DOKKU_API_VERSION ]]; then
  PLUGIN_BASE_PATH="$PLUGIN_ENABLED_PATH"
fi
source "$(dirname "$0")/functions"
source "$(dirname "$0")/config"

if [[ $1 == $PLUGIN_COMMAND_PREFIX:* ]]; then
  if [[ ! -d $PLUGIN_DATA_ROOT ]]; then
    dokku_log_fail "$PLUGIN_SERVICE: Please run: sudo dokku plugin:install"
  fi
fi


case "$1" in
	$PLUGIN_COMMAND_PREFIX:create)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		[[ ! -d "$PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME already exists"
		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"

		new_password=$(openssl rand -base64 32|base64)
		database=$(database_name "$NAME")
		echo $database > "$DBINFO_ROOT/db"
		echo $new_password > "$DBINFO_ROOT/pass"
		touch "$DBINFO_ROOT/links"
		chmod 600 "$DBINFO_ROOT/*"

		# TODO

		dokku_log_info2 "$PLUGIN_SERVICE database created: $NAME"
		;;

	$PLUGIN_COMMAND_PREFIX:destroy)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		[[ -d "$PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"
		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"

		# TODO

		;;

	$PLUGIN_COMMAND_PREFIX:link)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		[[ -z $3 ]] && dokku_log_fail "Please specify a name for the app"
		NAME="$2"
		APP="$3"

		[[ -d "$PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"
		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"

		# TODO

		;;

	$PLUGIN_COMMAND_PREFIX:unlink)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		[[ -z $3 ]] && dokku_log_fail "Please specify a name for the app"
		NAME="$2"
		APP="$3"

		[[ -d "$PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"
		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"

		# TODO

		;;

	$PLUGIN_COMMAND_PREFIX:export)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		[[ -d "$PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"
		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"

		# TODO

		;;

	$PLUGIN_COMMAND_PREFIX:import)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		[[ -d "$PLUGIN_DATA_ROOT/$2" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"
		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"

		# TODO

		;;

	$PLUGIN_COMMAND_PREFIX:list)
		;;

	$PLUGIN_COMMAND_PREFIX:connect)
		;;

	$PLUGIN_COMMAND_PREFIX:logs)
		;;

	$PLUGIN_COMMAND_PREFIX:start)
		;;

	$PLUGIN_COMMAND_PREFIX:stop)
		;;

	$PLUGIN_COMMAND_PREFIX:restart)
		;;


	help | $PLUGIN_COMMAND_PREFIX:help)
		HELP=$(cat<<EOF
			$PLUGIN_COMMAND_PREFIX:create <name>, Create a $PLUGIN_SERVICE database
			$PLUGIN_COMMAND_PREFIX:destroy <name>, Delete the $PLUGIN_SERVICE database
			$PLUGIN_COMMAND_PREFIX:link <name> <app>, Link the $PLUGIN_SERVICE database to the app
			$PLUGIN_COMMAND_PREFIX:unlink <name> <app>, Unlink the $PLUGIN_SERVICE database from the app
			$PLUGIN_COMMAND_PREFIX:export <name>, Export a dump of the $PLUGIN_SERVICE database
			$PLUGIN_COMMAND_PREFIX:import <name> < <file>, Import a dump into the $PLUGIN_SERVICE database
			$PLUGIN_COMMAND_PREFIX:list, List all $PLUGIN_SERVICE databases
			$PLUGIN_COMMAND_PREFIX:connect, Connect to $PLUGIN_SERVICE
			$PLUGIN_COMMAND_PREFIX:logs [-t], Print the most recent log(s) for $PLUGIN_SERVICE container
			$PLUGIN_COMMAND_PREFIX:start, Start a $PLUGIN_SERVICE container
			$PLUGIN_COMMAND_PREFIX:stop, Stop a running $PLUGIN_SERVICE container
			$PLUGIN_COMMAND_PREFIX:restart, Graceful shutdown and restart of the $PLUGIN_SERVICE container
		EOF)

		if [[ -n $DOKKU_API_VERSION ]]; then
			echo "$HELP"
		else
			cat && echo "$HELP"
		fi
		;;

	*)
		exit "$DOKKU_NOT_IMPLEMENTED_EXIT"
		;;

esac
