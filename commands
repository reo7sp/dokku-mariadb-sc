#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

PLUGIN_BASE_PATH="$PLUGIN_PATH"
if [[ -n $DOKKU_API_VERSION ]]; then
	PLUGIN_BASE_PATH="$PLUGIN_ENABLED_PATH"
fi
source "$PLUGIN_BASE_PATH/common/functions"
source "$(dirname "$0")/functions"
source "$(dirname "$0")/config"

if [[ $1 == $PLUGIN_COMMAND_PREFIX:* ]]; then
	if [[ ! -d $PLUGIN_DATA_ROOT ]]; then
		dokku_log_fail "$PLUGIN_SERVICE: Please run: sudo dokku plugin:install"
	fi
fi


case "$1" in
	$PLUGIN_COMMAND_PREFIX:create)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		DB_NAME=$(generate_database_name "$NAME")
		NEW_PW=$(generate_random_string 8)
		echo $DB_NAME > "$DBINFO_ROOT/DB_NAME"
		echo $NEW_PW > "$DBINFO_ROOT/PASSWORD"
		touch "$DBINFO_ROOT/LINKS"
		chmod 600 "$DBINFO_ROOT/*"
		manage $CONTAINER_ID create $DB_NAME $NEW_PW $(get_admin_password)

		dokku_log_info2 "$PLUGIN_SERVICE database created: $NAME"
		;;

	$PLUGIN_COMMAND_PREFIX:destroy)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		[[ "$3" == "force" ]] && DOKKU_APPS_FORCE_DELETE=1
		if [[ -z "$DOKKU_APPS_FORCE_DELETE" ]]; then
			dokku_log_warn "WARNING: Potentially Destructive Action"
			dokku_log_warn "This command will destroy $PLUGIN_SERVICE $NAME database."
			dokku_log_warn "To proceed, type \"$NAME\""
			echo ""

			read -p "> " name
			if [[ "$name" != "$NAME" ]]; then
				dokku_log_warn "Confirmation did not match $NAME. Aborted."
				exit 1
			fi
		fi

		DB_NAME=$(cat "$DBINFO_ROOT/DB_NAME")
		manage $CONTAINER_ID destroy $DB_NAME $(get_admin_password)
		rm -rf "$DBINFO_ROOT"

		dokku_log_info2 "$PLUGIN_SERVICE database deleted: $NAME"
		;;

	$PLUGIN_COMMAND_PREFIX:link)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		[[ -z $3 ]] && dokku_log_fail "Please specify a name for the app"
		NAME="$2"
		APP="$3"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		DB_NAME=$(cat "$DBINFO_ROOT/DB_NAME")
		PW=$(cat "$DBINFO_ROOT/PASSWORD")
		DB_URL=$(get_database_url $DB_NAME $PW)

		LINK=$(echo "$(dokku config "$APP")" | grep "$DB_URL" | cut -d: -f1) || true
		[[ -n $LINK ]] && dokku_log_fail "Already linked as $LINK"

		echo "$APP" >> "$DBINFO_ROOT/LINKS"
		dokku docker-options:add "$APP" build,deploy,run "--link $CONTAINER_ID:$PLUGIN_DATABASE_ALIAS"
		dokku config:set "$APP" "DATABASE_URL=$DB_URL"
		dokku config:set "$APP" "DB_HOST=$PLUGIN_DATABASE_ALIAS"
		dokku config:set "$APP" "DB_PORT=$PLUGIN_DATABASE_PORT"
		dokku config:set "$APP" "DB_USER=$DB_NAME"
		dokku config:set "$APP" "DB_PASS=$PW"

		dokku_log_info2 "$APP linked to $PLUGIN_SERVICE database: $NAME"
		;;

	$PLUGIN_COMMAND_PREFIX:unlink)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		[[ -z $3 ]] && dokku_log_fail "Please specify a name for the app"
		NAME="$2"
		APP="$3"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		DB_NAME=$(cat "$DBINFO_ROOT/DB_NAME")
		PW=$(cat "$DBINFO_ROOT/PASSWORD")
		DB_URL=$(get_database_url $DB_NAME $PW)

		LINK=$(echo "$(dokku config "$APP")" | grep "$DB_URL" | cut -d: -f1) || true
		[[ -z ${LINK[*]} ]] && dokku_log_fail "Not linked to app $APP"

		sed -i "/^$APP\$/d" "$DBINFO_ROOT/LINKS"
		dokku docker-options:remove "$APP" build,deploy,run "--link $CONTAINER_ID:$PLUGIN_DATABASE_ALIAS"
		dokku config:unset "$APP" "DATABASE_URL"
		dokku config:unset "$APP" "DB_HOST"
		dokku config:unset "$APP" "DB_PORT"
		dokku config:unset "$APP" "DB_USER"
		dokku config:unset "$APP" "DB_PASS"

		dokku_log_info2 "$APP unlinked from $PLUGIN_SERVICE database: $NAME"
		;;

	$PLUGIN_COMMAND_PREFIX:export)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		DB_NAME=$(cat "$DBINFO_ROOT/DB_NAME")
		manage $CONTAINER_ID dump $DB_NAME $(get_admin_password)
		;;

	$PLUGIN_COMMAND_PREFIX:import)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		DB_NAME=$(cat "$DBINFO_ROOT/DB_NAME")
		manage $CONTAINER_ID connect $DB_NAME $(get_admin_password)
		;;

	$PLUGIN_COMMAND_PREFIX:list)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		DB_NAME=$(cat "$DBINFO_ROOT/DB_NAME")
		manage $CONTAINER_ID connect $DB_NAME $(get_admin_password)
		;;

	$PLUGIN_COMMAND_PREFIX:connect)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		DB_NAME=$(cat "$DBINFO_ROOT/DB_NAME")
		manage $CONTAINER_ID connect $DB_NAME $(get_admin_password)
		;;

	$PLUGIN_COMMAND_PREFIX:user_connect)
		[[ -z $2 ]] && dokku_log_fail "Please specify a name for the database"
		NAME="$2"

		DBINFO_ROOT="$PLUGIN_DATA_ROOT/$NAME"
		[[ -d "$DBINFO_ROOT" ]] || dokku_log_fail "$PLUGIN_SERVICE database $NAME doesn't exist"

		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		DB_NAME=$(cat "$DBINFO_ROOT/DB_NAME")
		PW=$(cat "$DBINFO_ROOT/PASSWORD")
		manage $CONTAINER_ID user_connect $DB_NAME $PW
		;;

	$PLUGIN_COMMAND_PREFIX:logs)
		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		if [[ $2 == "-t" ]]; then
			DOKKU_LOGS_ARGS="--follow"
		else
			DOKKU_LOGS_ARGS="--tail 100"
		fi

		docker logs $DOKKU_LOGS_ARGS $CONTAINER_ID
		;;

	$PLUGIN_COMMAND_PREFIX:start)
		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"
		RUNNING_CONTAINER_ID=$(docker ps -f status=running -f id=$CONTAINER_ID -q) || true
		[[ -n $RUNNING_CONTAINER_ID ]] && dokku_log_fail "Container is already started"

		dokku_log_info1_quiet "Starting container"

		docker start $CONTAINER_ID
		dokku_log_info2 "Container started"

		restart_apps
		;;

	$PLUGIN_COMMAND_PREFIX:stop)
		CONTAINER_ID=$(get_container_id)
		[[ ! -n $CONTAINER_ID ]] && dokku_log_fail "No container exists"

		dokku_log_info1_quiet "Stopping container"

		manage $CONTAINER_ID shutdown $(get_admin_password)
		docker stop $CONTAINER_ID

		dokku_log_info2 "Container stopped"
		;;

	$PLUGIN_COMMAND_PREFIX:restart)
		dokku $PLUGIN_COMMAND_PREFIX:stop
		dokku $PLUGIN_COMMAND_PREFIX:start
		;;

	$PLUGIN_COMMAND_PREFIX:install)
		if ! docker images | grep -e "^$PLUGIN_IMAGE " | grep -q "$PLUGIN_IMAGE_VERSION"; then
			dokku_log_info1_quiet "Downloading container image"
			docker pull "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION"
		fi

		dokku_log_info1_quiet "Creating container"

		mkdir -p "$PLUGIN_DATA_ROOT/data" || echo "Failed to create $PLUGIN_SERVICE directory"
		chown dokku:dokku "$PLUGIN_DATA_ROOT"

		ROOT_PW=$(generate_random_string 8)
		ID=$(docker run --name "$PLUGIN_SERVICE" -v "$SERVICE_DATA_ROOT/data:/var/lib/mysql" -e "MYSQL_ROOT_PASSWORD=$ROOT_PW" -d --restart always --label dokku=service --label dokku.service=mariadb "$PLUGIN_IMAGE:$PLUGIN_IMAGE_VERSION")
		echo "$ID" > "$PLUGIN_DATA_ROOT/CONTAINER_ID"
		echo "$ROOT_PW" > "$PLUGIN_DATA_ROOT/ROOT_PASSWORD"

		dokku_log_info2 "Container was created"
		;;


	help | $PLUGIN_COMMAND_PREFIX:help)
		HELP=$(cat<<EOF
    $PLUGIN_COMMAND_PREFIX:create <name>, Create a $PLUGIN_SERVICE database
    $PLUGIN_COMMAND_PREFIX:destroy <name>, Delete the $PLUGIN_SERVICE database
    $PLUGIN_COMMAND_PREFIX:link <name> <app>, Link the $PLUGIN_SERVICE database to the app
    $PLUGIN_COMMAND_PREFIX:unlink <name> <app>, Unlink the $PLUGIN_SERVICE database from the app
    $PLUGIN_COMMAND_PREFIX:export <name>, Export a dump of the $PLUGIN_SERVICE database
    $PLUGIN_COMMAND_PREFIX:import <name> < <file>, Import a dump into the $PLUGIN_SERVICE database
    $PLUGIN_COMMAND_PREFIX:list, List all $PLUGIN_SERVICE databases
    $PLUGIN_COMMAND_PREFIX:connect, Connect to $PLUGIN_SERVICE
    $PLUGIN_COMMAND_PREFIX:logs [-t], Print the most recent log(s) for $PLUGIN_SERVICE container
    $PLUGIN_COMMAND_PREFIX:start, Start a $PLUGIN_SERVICE container
    $PLUGIN_COMMAND_PREFIX:stop, Stop a running $PLUGIN_SERVICE container
    $PLUGIN_COMMAND_PREFIX:restart, Graceful shutdown and restart of the $PLUGIN_SERVICE container
    $PLUGIN_COMMAND_PREFIX:install, Create $PLUGIN_SERVICE container
EOF
		)

		if [[ -n $DOKKU_API_VERSION ]]; then
			echo "$HELP"
		else
			cat && echo "$HELP"
		fi
		;;

	*)
		exit "$DOKKU_NOT_IMPLEMENTED_EXIT"
		;;

esac
